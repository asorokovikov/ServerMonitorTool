@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ServerMonitorApp.Common
@using ServerMonitorApp.Reports

<h1 class="h3 mb-3"><FeatherDatabase  Size="100" Color="#FFF" StrokeWidth="2.8f" /> Logs</h1>
<div class="card">

    <div class="list-group list-group-flush">
        @foreach (var message in Model.Messages.TakeLast(10)) {
            <div class="list-group-item @(GetLogLevelCssClass(message.LogLevel))">
                @message
            </div>
            @if (message.Exception != null) {
                <div class="list-group-item list-group-item-danger">
                    @message.Exception.Message
                    @message.Exception.InnerException?.Message
                </div>
            }
        }
    </div>
</div>

@code {

    [CascadingParameter]
    public IDispatcher Dispatcher { get; set; } = default!;

    [Inject]
    public IState<MetricsReportLogs> State { get; set; } = default!;

    public MetricsReportLogs Model => State.Value;

    protected override void OnInitialized() {
        base.OnInitialized();
        Dispatcher.Dispatch(new StartReceivingLogsAction());
    }

    protected override void Dispose(bool disposing) {
        base.Dispose(disposing);
        if (disposing) {
            Dispatcher.Dispatch(new StopReceivingLogsAction());
        }
    }

    private string
    GetLogLevelCssClass(LogLevel logLevel) => logLevel switch {
        LogLevel.Trace => string.Empty,
        LogLevel.Debug => "list-group-item-success",
        LogLevel.Information => string.Empty,
        LogLevel.Warning => "list-group-item-primary",
        LogLevel.Error => "list-group-item-danger",
        LogLevel.Critical => "list-group-item-warning",
        LogLevel.None => string.Empty,
        _ => throw new ArgumentOutOfRangeException(nameof(logLevel), logLevel, null)
    };
}
