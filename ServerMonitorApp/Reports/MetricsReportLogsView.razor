@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ServerMonitorApp.Common
@using ServerMonitorApp.Reports
@using ServerMonitorCore.Common

<div class="card">
    <div class="card-header">
        <div class="card-title mb-0 h5">Logs</div>
    </div>
    <table class="table table-hover">
        <thead>
        <tr>
            <th style="width: 5%">Time</th>
            <th style="width: 5%">Level</th>
            <th style="width: 5%">Thread</th>
            <th style="width: 10%">Source</th>
            <th>Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var message in Model.Messages.TakeLast(10)) {
            <tr class="table-@GetLogLevelCssClass(message.LogLevel)">
                <td>@message.Timestamp.ToString("T")</td>
                <td>@message.LogLevel</td>
                <td>@message.ThreadId</td>
                <td>
                    <Tooltip Text="@message.Source">
                        @message.Source.LastWord('.')
                    </Tooltip>
                </td>
                <td>@message.Body</td>
            </tr>
            @if (message.Exception != null) {
                <tr class="table-danger">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                <td> 
                    @if (message.Body != message.Exception.Message) {
                             @message.Exception.Message
                             @message.Exception.InnerException?.Message
                         }
                    else {
                        @message.Exception.StackTrace
                    }
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@code {

    [CascadingParameter]
    public IDispatcher Dispatcher { get; set; } = default!;

    [Inject]
    public IState<MetricsReportLogs> State { get; set; } = default!;

    public MetricsReportLogs Model => State.Value;

    protected override void OnInitialized() {
        base.OnInitialized();
        Dispatcher.Dispatch(new StartReceivingLogsAction());
    }

    protected override void Dispose(bool disposing) {
        base.Dispose(disposing);
        if (disposing) {
            Dispatcher.Dispatch(new StopReceivingLogsAction());
        }
    }

    private string
    GetLogLevelCssClass(LogLevel logLevel) => logLevel switch {
        LogLevel.Trace => string.Empty,
        LogLevel.Debug => string.Empty,
        LogLevel.Information => string.Empty,
        LogLevel.Warning => "primary",
        LogLevel.Error => "danger",
        LogLevel.Critical => "danger",
        LogLevel.None => string.Empty,
        _ => throw new ArgumentOutOfRangeException(nameof(logLevel), logLevel, null)
    };
}
